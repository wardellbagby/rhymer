{"version":3,"sources":["webpack://lyricistant/./node_modules/comlink/dist/esm/comlink.mjs","webpack://lyricistant/./packages/rhyme-generator/main/rhyme-generator.ts","webpack://lyricistant/webpack/startup"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","serialize","get","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","pronunciations","cache","MAX_POPULARITY_SCORE","reverseSyllables","pronunciation","replace","split","reverse","getBaseWord","word","index","indexOf","trim","compare","dictPronunciation","dictWord","score","left","right","leftSyllables","rightSyllables","max","calculateScore","pr","generateRhymes","toLowerCase","has","wordPronunciation","generatedRhymes","keys","baseWord","result","push","results","sort","a","b","size","delete","next","__webpack_modules__"],"mappings":"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","file":"946.renderer.js","sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { expose } from 'comlink';\nimport pronunciationsJson from './pronunciations.json';\n\ninterface Pronunciation {\n  pr: string;\n  p?: number;\n}\ninterface Rhyme {\n  score: number;\n  word: string;\n}\n\n// Force retype so that the IDE doesn't freak out with the large JSON file.\nconst pronunciations = pronunciationsJson as Record<string, Pronunciation>;\nconst cache = new Map<string, Rhyme[]>();\nconst MAX_POPULARITY_SCORE = 100_000;\nconst MAX_RHYMES_COUNT = 100;\nconst MAX_CACHE_COUNT = 100;\n\nexport const generateRhymes = (word: string): Rhyme[] => {\n  if (!word) {\n    return [];\n  }\n\n  word = word.toLowerCase();\n\n  if (cache.has(word)) {\n    return cache.get(word);\n  }\n  const wordPronunciation = pronunciations[word];\n\n  if (!wordPronunciation) {\n    return [];\n  }\n\n  const generatedRhymes: Rhyme[] = [];\n\n  for (const dictWord of Object.keys(pronunciations)) {\n    const baseWord = getBaseWord(dictWord);\n    if (baseWord !== word) {\n      const result = compare(\n        pronunciations[dictWord],\n        baseWord,\n        wordPronunciation\n      );\n      if (result) {\n        generatedRhymes.push(result);\n      }\n    }\n  }\n\n  const results = generatedRhymes\n    .sort((a, b) => b.score - a.score)\n    .slice(0, MAX_RHYMES_COUNT);\n\n  cache.set(word, results);\n  if (cache.size > MAX_CACHE_COUNT) {\n    cache.delete(cache.keys().next().value);\n  }\n\n  return results;\n};\n\nconst reverseSyllables = (pronunciation: string) =>\n  pronunciation.replace(/[0-9]/g, '').split(' ').reverse();\n\nconst calculateScore = (left: string, right: string) => {\n  const leftSyllables = reverseSyllables(left);\n  const rightSyllables = reverseSyllables(right);\n  const length = Math.max(left.length, right.length);\n  let score = 0;\n\n  for (let index = 0; index < length; index++) {\n    if (leftSyllables[index] !== rightSyllables[index]) {\n      break;\n    }\n\n    score += MAX_POPULARITY_SCORE;\n  }\n\n  if (leftSyllables.length === rightSyllables.length) {\n    score += MAX_POPULARITY_SCORE;\n  }\n\n  return score;\n};\n\nconst getBaseWord = (word: string) => {\n  const index = word.indexOf('(');\n  return index < 0 ? word : word.slice(0, index).trim();\n};\n\nconst compare = (\n  dictPronunciation: Pronunciation,\n  dictWord: string,\n  pronunciation: Pronunciation\n) => {\n  let score = calculateScore(dictPronunciation.pr, pronunciation.pr);\n\n  if (score > 1) {\n    if (dictPronunciation.p) {\n      score += (MAX_POPULARITY_SCORE - dictPronunciation.p) * 2;\n    }\n    return {\n      score,\n      word: dictWord,\n    };\n  }\n};\n\nexpose({\n  generateRhymes,\n});\n","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[1898]();\n"],"sourceRoot":""}